#include "pch.h"
#include"CheckValue.h"
#include"../internship1_5/Stack.h"
#include"../internship1_5/Queue.h"

///@brief リストの内容が正解と等しいか確認します
///@param ans 正解をvectorとして渡します
///@param stack 内容が正しいか調べたいスタックを渡します
void CheckValue(const std::vector<int>& ans, Stack<int>& stack)
{
	EXPECT_TRUE(ans.size() == stack.size());

	size_t i = 0;
	while (0 < stack.size())
	{
		int temp;

		stack.pop(temp);
		EXPECT_EQ(temp, ans[i]);

		++i;
	}
}

///@brief リストの内容が正解と等しいか確認します
///@param ans 正解をvectorとして渡します
///@param queue 内容が正しいか調べたいキューを渡します
void CheckValue(const std::vector<int>& ans, Queue<int>& queue)
{
	EXPECT_TRUE(ans.size() == queue.size());

	size_t i = 0;
	while (0 < queue.size())
	{
		int temp;

		queue.pop(temp);
		EXPECT_EQ(temp, ans[i]);

		++i;
	}
}

//==================================== スタック構造 ====================================

//=================================== データ数の取得 ===================================

/**********************************************************************************//**
	@brief		リストが空である場合のデータ数の取得テスト
	@details	ID:スタック-0\n
				データ数の取得機能のテストです。\n
				リストが空である場合の戻り値を確認しています。\n
				データ数が0であれば成功です。\n
*//***********************************************************************************/

TEST(TestStackSize, Empty)
{
	Stack<int>stack;
	EXPECT_EQ(0,stack.size());
}

/**********************************************************************************//**
	@brief		要素をプッシュした後のデータ数の取得テスト
	@details	ID:スタック-1\n
				データ数の取得機能のテストです。\n
				要素をプッシュした後の戻り値を確認しています。\n
				データ数が1であれば成功です。\n
*//***********************************************************************************/

TEST(TestStackSize, AfterPush)
{
	Stack<int>stack;
	ASSERT_TRUE(stack.push(0));
	EXPECT_EQ(1, stack.size());
}

/**********************************************************************************//**
	@brief		要素をポップした後のデータ数の取得テスト
	@details	ID:スタック-2\n
				データ数の取得機能のテストです。\n
				要素をポップした後の戻り値を確認しています。\n
				データ数が0であれば成功です。\n
*//***********************************************************************************/

TEST(TestStackSize, AfterPop)
{
	Stack<int>stack;
	int temp;
	ASSERT_TRUE(stack.push(0));
	ASSERT_TRUE(stack.pop(temp));
	EXPECT_EQ(0, stack.size());
}

/**********************************************************************************//**
	@brief		要素のプッシュに失敗した後のデータ数の取得テスト
	@details	ID:スタック-3\n
				データ数の取得機能のテストです。\n
				要素のプッシュに失敗した後の戻り値を確認しています。\n
				データ数が0であれば成功です。\n
*//***********************************************************************************/

TEST(TestStackSize, AfterPopFailure)
{
	//プッシュはメモリーアロケーションエラー以外で失敗する可能性がないのでスキップする
	//Stack<int>stack;
	//ASSERT_FALSE(stack.push(0));
	//EXPECT_EQ(0, stack.size());
}

/**********************************************************************************//**
	@brief		プッシュを2回行った後のデータ数の取得テスト
	@details	ID:スタック-4\n
				データ数の取得機能のテストです。\n
				プッシュを2回行った後の戻り値を確認しています。\n
				データ数が2であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackSize, After2Push)
{
	Stack<int>stack;
	ASSERT_TRUE(stack.push(0));
	ASSERT_TRUE(stack.push(1));
	EXPECT_EQ(2, stack.size());
}

/**********************************************************************************//**
	@brief		プッシュを2回行った後、１回ポップした後のデータ数の取得テスト
	@details	ID:スタック-5\n
				データ数の取得機能のテストです。\n
				プッシュを2回行った後、１回ポップした後の戻り値を確認しています。\n
				データ数が1であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackSize, After2Push1Pop)
{
	Stack<int>stack;
	int temp;
	ASSERT_TRUE(stack.push(0));
	ASSERT_TRUE(stack.push(1));
	ASSERT_TRUE(stack.pop(temp));
	EXPECT_EQ(1, stack.size());
}

/**********************************************************************************//**
	@brief		リストが空である場合に、ポップを行った後のデータ数の取得テスト
	@details	ID:スタック-6\n
				データ数の取得機能のテストです。\n
				リストが空である場合に、ポップを行った後の戻り値を確認しています。\n
				データ数が0であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackSize, AfterPopFromEmpty)
{
	Stack<int>stack;
	int temp;
	ASSERT_FALSE(stack.pop(temp));
	EXPECT_EQ(0, stack.size());
}

//====================================== プッシュ ======================================

/**********************************************************************************//**
	@brief		リストが空である場合に、プッシュした際のプッシュの挙動テスト
	@details	ID:スタック-8\n
				プッシュ機能のテストです。\n
				リストが空である場合に、プッシュした際のプッシュの戻り値と\n
				プッシュ後のスタックの内容を確認しています。\n
				戻り値がTRUEでスタックの内容が正しければ成功です。\n
*//***********************************************************************************/

TEST(TestStackPush, Empty)
{
	Stack<int>stack;
	EXPECT_TRUE(stack.push(0));
	CheckValue({0}, stack);
}

/**********************************************************************************//**
	@brief		リストに複数の要素がある場合に、プッシュした際のプッシュの挙動テスト
	@details	ID:スタック-9\n
				プッシュ機能のテストです。\n
				リストに複数の要素がある場合に、プッシュした際のプッシュの戻り値と\n
				プッシュ後のスタックの内容を確認しています。\n
				戻り値がTRUEでスタックの内容が正しければ成功です。\n
*//***********************************************************************************/
TEST(TestStackPush, MultipleElements)
{
	Stack<int>stack;
	EXPECT_TRUE(stack.push(0));
	EXPECT_TRUE(stack.push(1));
	EXPECT_TRUE(stack.push(2));
	CheckValue({ 2,1,0 }, stack);
}

//======================================= ポップ =======================================

/**********************************************************************************//**
	@brief		リストが空である場合に、ポップしたした際のポップの挙動テスト
	@details	ID:スタック-11\n
				ポップ機能のテストです。\n
				リストが空である場合に、ポップしたした際のポップの戻り値と\n
				ポップ後のスタックの内容を確認しています。\n
				戻り値がFALSEでスタックの内容が正しければ成功です。\n
*//***********************************************************************************/
TEST(TestStackPop, Empty)
{
	Stack<int>stack;
	int temp = 1;
	EXPECT_FALSE(stack.pop(temp));
	CheckValue({}, stack);
	EXPECT_EQ(1, temp);
}

/**********************************************************************************//**
	@brief		リストに複数の要素がある場合に、ポップした際のポップの挙動テスト
	@details	ID:スタック-12\n
				ポップ機能のテストです。\n
				リストに複数の要素がある場合に、ポップした際のポップの戻り値と\n
				ポップ後のスタックの内容、取得した値の内容を確認しています。\n
				戻り値がTRUEでスタックの内容、取得した内容が正しければ成功です。\n
*//***********************************************************************************/
TEST(TestStackPop, MultipleElements)
{
	Stack<int>stack;
	ASSERT_TRUE(stack.push(0));
	ASSERT_TRUE(stack.push(1));
	ASSERT_TRUE(stack.push(2));
	int temp;
	EXPECT_TRUE(stack.pop(temp));
	EXPECT_EQ(2,temp);
	CheckValue({1,0}, stack);
}

/**********************************************************************************//**
	@brief		リストに複数の要素がある場合に、複数回ポップした際のポップの挙動テスト
	@details	ID:スタック-13\n
				ポップ機能のテストです。\n
				リストに複数の要素がある場合に、複数回ポップした際のポップの戻り値と\n
				ポップ後のスタックの内容、取得した値の内容を確認しています。\n
				戻り値がTRUEでスタックの内容、取得した内容が正しければ成功です。\n
*//***********************************************************************************/
TEST(TestStackPop, PopMultipleTimes)
{
	constexpr size_t num = 3;

	Stack<int>stack;
	for (size_t i = 0; i < num; ++i)
	{
		ASSERT_TRUE(stack.push(i));
	}

	for (size_t i = 0; i < num; ++i)
	{
		int temp;
		EXPECT_TRUE(stack.pop(temp));
		EXPECT_EQ(num-1-i,temp);
	}

	CheckValue({}, stack);
}



//==================================== キュー構造 ====================================

//=================================== データ数の取得 ===================================

/**********************************************************************************//**
	@brief		リストが空である場合のデータ数の取得テスト
	@details	ID:キュー-0\n
				データ数の取得機能のテストです。\n
				リストが空である場合の戻り値を確認しています。\n
				データ数が0であれば成功です。\n
*//***********************************************************************************/

TEST(TestQueueSize, Empty)
{
	Queue<int>queue;
	EXPECT_EQ(0, queue.size());
}

/**********************************************************************************//**
	@brief		要素をプッシュした後のデータ数の取得テスト
	@details	ID:キュー-1\n
				データ数の取得機能のテストです。\n
				要素をプッシュした後の戻り値を確認しています。\n
				データ数が1であれば成功です。\n
*//***********************************************************************************/

TEST(TestQueueSize, AfterPush)
{
	Queue<int>queue;
	ASSERT_TRUE(queue.push(0));
	EXPECT_EQ(1, queue.size());
}

/**********************************************************************************//**
	@brief		要素をポップした後のデータ数の取得テスト
	@details	ID:キュー-2\n
				データ数の取得機能のテストです。\n
				要素をポップした後の戻り値を確認しています。\n
				データ数が0であれば成功です。\n
*//***********************************************************************************/

TEST(TestQueueSize, AfterPop)
{
	Queue<int>queue;
	int temp;
	ASSERT_TRUE(queue.push(0));
	ASSERT_TRUE(queue.pop(temp));
	EXPECT_EQ(0, queue.size());
}

/**********************************************************************************//**
	@brief		要素のプッシュに失敗した後のデータ数の取得テスト
	@details	ID:キュー-3\n
				データ数の取得機能のテストです。\n
				要素のプッシュに失敗した後の戻り値を確認しています。\n
				データ数が0であれば成功です。\n
*//***********************************************************************************/

TEST(TestQueueSize, AfterPopFailure)
{
	//プッシュはメモリーアロケーションエラー以外で失敗する可能性がないのでスキップする
	//Queue<int>queue;
	//ASSERT_FALSE(queue.push(0));
	//EXPECT_EQ(0, queue.size());
}

/**********************************************************************************//**
	@brief		プッシュを2回行った後のデータ数の取得テスト
	@details	ID:キュー-4\n
				データ数の取得機能のテストです。\n
				プッシュを2回行った後の戻り値を確認しています。\n
				データ数が2であれば成功です。\n
*//***********************************************************************************/
TEST(TestQueueSize, After2Push)
{
	Queue<int>queue;
	ASSERT_TRUE(queue.push(0));
	ASSERT_TRUE(queue.push(1));
	EXPECT_EQ(2, queue.size());
}

/**********************************************************************************//**
	@brief		プッシュを2回行った後、１回ポップした後のデータ数の取得テスト
	@details	ID:キュー-5\n
				データ数の取得機能のテストです。\n
				プッシュを2回行った後、１回ポップした後の戻り値を確認しています。\n
				データ数が1であれば成功です。\n
*//***********************************************************************************/
TEST(TestQueueSize, After2Push1Pop)
{
	Queue<int>queue;
	int temp;
	ASSERT_TRUE(queue.push(0));
	ASSERT_TRUE(queue.push(1));
	ASSERT_TRUE(queue.pop(temp));
	EXPECT_EQ(1, queue.size());
}

/**********************************************************************************//**
	@brief		リストが空である場合に、ポップを行った後のデータ数の取得テスト
	@details	ID:キュー-6\n
				データ数の取得機能のテストです。\n
				リストが空である場合に、ポップを行った後の戻り値を確認しています。\n
				データ数が0であれば成功です。\n
*//***********************************************************************************/
TEST(TestQueueSize, AfterPopFromEmpty)
{
	Queue<int>queue;
	int temp;
	ASSERT_FALSE(queue.pop(temp));
	EXPECT_EQ(0, queue.size());
}

//====================================== プッシュ ======================================

/**********************************************************************************//**
	@brief		リストが空である場合に、プッシュした際のプッシュの挙動テスト
	@details	ID:キュー-8\n
				プッシュ機能のテストです。\n
				リストが空である場合に、プッシュした際のプッシュの戻り値と\n
				プッシュ後のキューの内容を確認しています。\n
				戻り値がTRUEでキューの内容が正しければ成功です。\n
*//***********************************************************************************/

TEST(TestQueuePush, Empty)
{
	Queue<int>queue;
	EXPECT_TRUE(queue.push(0));
	CheckValue({ 0 }, queue);
}

/**********************************************************************************//**
	@brief		リストに複数の要素がある場合に、プッシュした際のプッシュの挙動テスト
	@details	ID:キュー-9\n
				プッシュ機能のテストです。\n
				リストに複数の要素がある場合に、プッシュした際のプッシュの戻り値と\n
				プッシュ後のキューの内容を確認しています。\n
				戻り値がTRUEでキューの内容が正しければ成功です。\n
*//***********************************************************************************/
TEST(TestQueuePush, MultipleElements)
{
	Queue<int>queue;
	EXPECT_TRUE(queue.push(0));
	EXPECT_TRUE(queue.push(1));
	EXPECT_TRUE(queue.push(2));
	CheckValue({ 0,1,2 }, queue);
}

//======================================= ポップ =======================================

/**********************************************************************************//**
	@brief		リストが空である場合に、ポップしたした際のポップの挙動テスト
	@details	ID:キュー-11\n
				ポップ機能のテストです。\n
				リストが空である場合に、ポップしたした際のポップの戻り値と\n
				ポップ後のキューの内容を確認しています。\n
				戻り値がFALSEでキューの内容が正しければ成功です。\n
*//***********************************************************************************/
TEST(TestQueuePop, Empty)
{
	Queue<int>queue;
	int temp = 1;
	EXPECT_FALSE(queue.pop(temp));
	CheckValue({}, queue);
	EXPECT_EQ(1, temp);
}

/**********************************************************************************//**
	@brief		リストに複数の要素がある場合に、ポップした際のポップの挙動テスト
	@details	ID:キュー-12\n
				ポップ機能のテストです。\n
				リストに複数の要素がある場合に、ポップした際のポップの戻り値と\n
				ポップ後のキューの内容、取得した値の内容を確認しています。\n
				戻り値がTRUEでキューの内容、取得した内容が正しければ成功です。\n
*//***********************************************************************************/
TEST(TestQueuePop, MultipleElements)
{
	Queue<int>queue;
	ASSERT_TRUE(queue.push(0));
	ASSERT_TRUE(queue.push(1));
	ASSERT_TRUE(queue.push(2));
	int temp;
	EXPECT_TRUE(queue.pop(temp));
	EXPECT_EQ(0, temp);
	CheckValue({ 1,2 }, queue);
}

/**********************************************************************************//**
	@brief		リストに複数の要素がある場合に、複数回ポップした際のポップの挙動テスト
	@details	ID:キュー-13\n
				ポップ機能のテストです。\n
				リストに複数の要素がある場合に、複数回ポップした際のポップの戻り値と\n
				ポップ後のキューの内容、取得した値の内容を確認しています。\n
				戻り値がTRUEでキューの内容、取得した内容が正しければ成功です。\n
*//***********************************************************************************/
TEST(TestQueuePop, PopMultipleTimes)
{
	constexpr size_t num = 3;

	Queue<int>queue;
	for (size_t i = 0; i < num; ++i)
	{
		ASSERT_TRUE(queue.push(i));
	}

	for (size_t i = 0; i < num; ++i)
	{
		int temp;
		EXPECT_TRUE(queue.pop(temp));
		EXPECT_EQ(i, temp);
	}

	CheckValue({}, queue);
}

